«REM» Copyright (c) 2009-2010 by droMDAry.org (see CONTRIBUTORS)            «ENDREM»
«REM» All rights reserved. This program and the accompanying materials      «ENDREM»
«REM» are made available under the terms of the Eclipse Public License v1.0 «ENDREM»
«REM» which accompanies this distribution, and is available at              «ENDREM»
«REM» http://www.eclipse.org/legal/epl-v10.html                             «ENDREM»
«EXTENSION org::eclipse::xtend::util::stdlib::io»

«EXTENSION org::fornax::cartridges::uml2::javabasic::m2t::Helper»
«EXTENSION org::fornax::cartridges::uml2::javabasic::m2t::Names»
«EXTENSION org::fornax::cartridges::uml2::javabasic::m2t::Properties»

«EXTENSION org::dromdary::jpa::generator::extensions::EntityHelper»
«EXTENSION org::dromdary::jpa::generator::extensions::PropertiesHelper»

«REM»Generieren der Entities. Template wird für jede Entity aufgerufen.«ENDREM»
«DEFINE JpaEntity FOR uml::Class»
	
	«REM»Prüfen, ob aktuelle Klasse mit dem Stereotyp Entity ausgezeichnet ist«ENDREM»
	«IF getAppliedStereotype("SimpleJSR220::JPA_Entity")!=null»	
		
		«REM»Prüfen, ob Attributnamen gesetzt sind und ggf. setzen. 
		Falls Attribut zu einer Beziehung gehört, werden diese nicht implizit gesetzt (durch UML2Exporter).«ENDREM»
		«checkAttributeName()»
		«EXPAND File FOR this»
	«ENDIF»
«ENDDEFINE»

«REM»Java Dateien inkl. Inhalt erzeugen.«ENDREM»
«DEFINE File FOR uml::Class»
		
		«REM»Generieren des Entity Interfaces.«ENDREM»
		«FILE getFQNPackagePath()+"/"+interfaceName(name)+".java"»
			«EXPAND org::fornax::cartridges::uml2::javabasic::m2t::Entity::head»
			«EXPAND org::fornax::cartridges::uml2::javabasic::m2t::Entity::interfaceEntityDefine»			
					«EXPAND org::fornax::cartridges::uml2::javabasic::m2t::Attribute::staticAttribute»				
					«EXPAND Association::EntityInterfaceGetter FOR this»
					«IF !isId()»
						«EXPAND IdInterfaceGetterSetter FOR this»
					«ENDIF»
					«EXPAND org::fornax::cartridges::uml2::javabasic::m2t::Attribute::getterSetterInterface»
					«EXPAND org::fornax::cartridges::uml2::javabasic::m2t::Operation::operationInterface FOREACH this.getOperations()»					
			«EXPAND org::fornax::cartridges::uml2::javabasic::m2t::Entity::interfaceEntityEndDefine»	
		«ENDFILE»
		
		«REM»Generieren der abstrakten Entity.«ENDREM»
		«FILE getFQNPackagePath()+"/"+abstractClassName(name)+".java"»
			«EXPAND org::fornax::cartridges::uml2::javabasic::m2t::Entity::head»
			«EXPAND Annotation FOR this»
			«EXPAND org::fornax::cartridges::uml2::javabasic::m2t::Entity::abstractClassEntityDefine»				
				«IF !isId()»
					«EXPAND IdAbstractAttr FOR this»
				«ENDIF»
				«EXPAND org::fornax::cartridges::uml2::javabasic::m2t::Attribute::attribute»
				«REM»«IF isPrimaryKeyClassReq()»
					@EmbeddedId
					private «name»Pk «name.toFirstLower()»Pk = null;
				«ENDIF»«ENDREM»			
				«EXPAND org::fornax::cartridges::uml2::javabasic::m2t::Attribute::staticAttribute»
				«EXPAND Association::EntityAbstractAttribute FOR this»
				«IF !isId()»
					«EXPAND IdAbstractGetterSetter FOR this»
				«ENDIF»
				«EXPAND org::fornax::cartridges::uml2::javabasic::m2t::Attribute::getterSetter»	
				«EXPAND Association::EntityAbstractGetterSetter FOR this»		
				«IF getInterfaceOperationImplementationStrategy() == "use_abstract_method"»				
					«EXPAND org::fornax::cartridges::uml2::javabasic::m2t::Operation::operation(true)»				
				«ELSEIF getInterfaceOperationImplementationStrategy() == "none"»				
					«EXPAND org::fornax::cartridges::uml2::javabasic::m2t::Operation::operation»					
				«ENDIF»							
				«EXPAND org::fornax::cartridges::uml2::javabasic::m2t::Class::overwriteHashcodeEqualsToString»			
			«EXPAND org::fornax::cartridges::uml2::javabasic::m2t::Entity::abstractClassEntityEndDefine»		
		«ENDFILE»
		
		«REM»Generieren der Entity-Implementierungsklasse.«ENDREM»
		«FILE getFQNPackagePath()+"/"+implementationClassName(name)+".java" outletSrcOnceDir»		
			«EXPAND org::fornax::cartridges::uml2::javabasic::m2t::Entity::head»
			«EXPAND org::fornax::cartridges::uml2::javabasic::m2t::Entity::basicClassEntityDefine»
				«EXPAND org::fornax::cartridges::uml2::javabasic::m2t::SerialVersionUID::serialVersionUIDField»
				«IF getInterfaceOperationImplementationStrategy() == "use_abstract_method"»					
					«EXPAND org::fornax::cartridges::uml2::javabasic::m2t::Operation::operationBaseImpl(true)»						
				«ELSEIF getInterfaceOperationImplementationStrategy() == "none"»					
					«EXPAND org::fornax::cartridges::uml2::javabasic::m2t::Operation::operationBaseImpl»					
				«ENDIF»		
			«EXPAND org::fornax::cartridges::uml2::javabasic::m2t::Entity::basicClassEntityEndDefine»		
		«ENDFILE»		
«ENDDEFINE»


«REM»Annotation @Id setzen, wenn diese nicht im Modell gesetzt wurde.«ENDREM»
«DEFINE IdAbstractAttr FOR uml::Class»
		«IF searchIdAttributeName()»
			@Id
		«ELSE»
			«IF isExtendedClass()»
			
			«ELSE»
				@Id
				private int id;
			«ENDIF»
		«ENDIF»
«ENDDEFINE»

«REM»Getter und Setter in abstrakter Klasse für die id generieren, wenn die Annotation @Id im Modell nicht gesetzt wurde.«ENDREM»
«DEFINE IdAbstractGetterSetter FOR uml::Class»
	«IF searchIdAttributeName()»
	
	«ELSE»
		«IF isExtendedClass()»
		
		«ELSE»
			/**
			 * 
			 * @return The «REM»«IF isExtendedClass()»«name.toFirstLower()»Id«ELSE»id«ENDIF»«ENDREM»id as <code>java.lang.Integer</code>
			 */
			public java.lang.Integer get«REM»«IF isExtendedClass()»«name»«ENDIF»«ENDREM»Id() {
				return «REM»«IF isExtendedClass()»«name.toFirstLower()»Id«ELSE»id«ENDIF»«ENDREM»id;
			}
		
			/**
			 * 
			 * @param «REM»«IF isExtendedClass()»«name.toFirstLower()»Id«ELSE»id«ENDIF»«ENDREM»id The «REM»«IF isExtendedClass()»«name»Id«ELSE»id«ENDIF»«ENDREM»id to set
			 */
			public void set«REM»«IF isExtendedClass()»«name»«ENDIF»«ENDREM»Id(java.lang.Integer id) {
				this.«REM»«IF isExtendedClass()»«name.toFirstLower()»Id«ELSE»id«ENDIF»«ENDREM»id = «REM»«IF isExtendedClass()»«name.toFirstLower()»Id«ELSE»id«ENDIF»«ENDREM»id;
			}
		«ENDIF»
	«ENDIF»
«ENDDEFINE»

«REM»Getter und Setter im Interface für die id generieren, wenn die Annotation @Id im Modell nicht gesetzt wurde«ENDREM»
«DEFINE IdInterfaceGetterSetter FOR uml::Class»
	«IF searchIdAttributeName()»
	
	«ELSE»
		«IF isExtendedClass()»
		
		«ELSE»
			/**
			 * 
			 * @return The id as <code>java.lang.Integer</code>
			 */
		
			public java.lang.Integer getId();
		
			/**
			 * 
			 * @param id The id to set
			 */
		
			public void setId(java.lang.Integer id);
		«ENDIF»
	«ENDIF»
«ENDDEFINE»

«REM»Annotation @Entity und die für die JPA benötigte Annotation @Table generieren.
Diese duerfen nur in der abstrakten Klasse generiert werden, deswegen werden sie nicht im 
AOP-Template generiert.«ENDREM»
«DEFINE Annotation FOR uml::Class»
	«IF getAppliedStereotype("SimpleJSR220::JPA_Entity") != null && 
			getAppliedStereotype("SimpleJSR220::JPA_TableJPA") == null»
				@Entity
				@Table(name="«name»", schema="«getTableSchema()»")
	«ENDIF»	
«ENDDEFINE»

«REM»Benötigte Imports für eine Entity generieren.«ENDREM»
«DEFINE Imports FOR uml::Class»
	import javax.persistence.*;
«ENDDEFINE»