«REM» Copyright (c) 2009-2010 by droMDAry.org (see CONTRIBUTORS)            «ENDREM»
«REM» All rights reserved. This program and the accompanying materials      «ENDREM»
«REM» are made available under the terms of the Eclipse Public License v1.0 «ENDREM»
«REM» which accompanies this distribution, and is available at              «ENDREM»
«REM» http://www.eclipse.org/legal/epl-v10.html                             «ENDREM»
«EXTENSION org::eclipse::xtend::util::stdlib::io»

«EXTENSION org::fornax::cartridges::uml2::javabasic::m2t::Helper»
«EXTENSION org::dromdary::jpa::generator::extensions::NameHelper»
«EXTENSION org::fornax::cartridges::uml2::javabasic::m2t::Properties»

«EXTENSION org::dromdary::jpa::generator::extensions::EntityHelper»
«EXTENSION org::dromdary::jpa::generator::extensions::PropertiesHelper»

«DEFINE daoFactory FOR uml::Model»
	«EXPAND daoFactoryClass FOR this»
«ENDDEFINE»

«DEFINE daoFactoryClass FOR uml::Model»
	«FILE getDaoPackageName() + "/DAOFactory.java"»
		package «getDaoPackageName()»;
		«EXPAND daoFactoryImports FOR this»
		«EXPAND daoFactoryJavaDoc FOR this»
		public abstract class DAOFactory {
			«EXPAND daoFactoryAttributes FOR this»
			«EXPAND daoFactoryOperations FOR this»
		}
	«ENDFILE»
«ENDDEFINE»

«DEFINE daoFactoryImports FOR uml::Model»
	import org.apache.commons.logging.Log;
	import org.apache.commons.logging.LogFactory;
«ENDDEFINE»

«DEFINE daoFactoryJavaDoc FOR uml::Model»
	/**
	 * Defines all DAOs and the concrete factories to get the conrecte DAOs.
	 * <p>
	 * To get a concrete DAOFactory, call <tt>instance()</tt> with one of the
	 * classes that extend this factory.
	 * <p>
	 * Implementation: If you write a new DAO, this class has to know about it.
	 * If you add a new persistence mechanism, add an additional concrete factory
	 * for it as a constant, like <tt>HIBERNATE</tt>.
	 *
	 */
«ENDDEFINE»

«DEFINE daoFactoryAttributes FOR uml::Model»
	 private static Log log = LogFactory.getLog(DAOFactory.class);
«ENDDEFINE»

«DEFINE daoFactoryOperations FOR uml::Model»
	 /**
     * Creates a standalone DAOFactory that returns unmanaged DAO
     * beans for use in any environment Hibernate has been configured
     * for. Uses HibernateUtil/SessionFactory and Hibernate context
     * propagation (CurrentSessionContext), thread-bound or transaction-bound,
     * and transaction scoped.
     */
    public static final Class HIBERNATE = «getDaoPackageName()».JpaDAOFactory.class;

    /**
     * Factory method for instantiation of concrete factories.
     */
    public static DAOFactory instance(Class factory) {
        try {
            log.debug("Creating concrete DAO factory: " + factory);
            return (DAOFactory)factory.newInstance();
        } catch (Exception ex) {
            throw new RuntimeException("Couldn't create DAOFactory: " + factory);
        }
    }
«ENDDEFINE»