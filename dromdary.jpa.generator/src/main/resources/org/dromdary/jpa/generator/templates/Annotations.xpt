«REM» Copyright (c) 2009-2012 by droMDAry.org (see CONTRIBUTORS)            «ENDREM»
«REM» All rights reserved. This program and the accompanying materials      «ENDREM»
«REM» are made available under the terms of the Eclipse Public License v1.0 «ENDREM»
«REM» which accompanies this distribution, and is available at              «ENDREM»
«REM» http://www.eclipse.org/legal/epl-v10.html                             «ENDREM»
«EXTENSION org::dromdary::jpa::generator::extensions::EntityHelper»
«EXTENSION org::dromdary::jpa::generator::extensions::PropertiesHelper»
«EXTENSION org::dromdary::jpa::generator::extensions::NameHelper»

«DEFINE entityAnnotations FOR uml::Class»
	«EXPAND Entity::imports FOR this»
	«IF isExtendedClass()»
		«IF getAppliedStereotype("SimpleJSR220::JPA_InheritanceJPA") == null && genDefInheritanceAndDiscriminatorColumnAnnotation() == "true"»
			@Inheritance(strategy = InheritanceType.SINGLE_TABLE)			
		«ENDIF»		
		«IF getAppliedStereotype("SimpleJSR220::JPA_DiscriminatorColumnJPA") == null && genDefInheritanceAndDiscriminatorColumnAnnotation() == "true"»
			@DiscriminatorColumn(
		    	name = "«name»_TYPE",
		    	discriminatorType = DiscriminatorType.«IF !isId()»INTEGER«ELSE»«getIdAttributeType()»«ENDIF»
			)
		«ENDIF»
		«IF getAppliedStereotype("SimpleJSR220::JPA_AttributeOverridesJPA") == null»
			@AttributeOverrides({ «FOREACH allParents().getAllAttributes() AS parentAttr ITERATOR iter SEPARATOR ","»
				@AttributeOverride(name = "«parentAttr.name»", column = @Column(name = "«generateColumnName(parentAttr.name, generateTableName(this.name))»"«getCustomColumnDefinitionString(parentAttr)»))
			«ENDFOREACH» })
			
		«ENDIF»
	«ENDIF»	
	«IF getAppliedStereotype("SimpleJSR220::JPA_IdClassJPA") == null»
		«IF isPrimaryKeyClassReq()»
			@IdClass(«name»Pk.class)
		«ENDIF»
	«ENDIF»	
	«IF getAppliedStereotype("SimpleJSR220::JPA_DiscriminatorColumnJPA") != null»
		@DiscriminatorColumn
		(«FOREACH getAppliedStereotype("SimpleJSR220::JPA_DiscriminatorColumnJPA").getAllAttributes().reject(
						e|e.name.contains("base_")
					||  e.name.contains("packageName")
					||	getValue(getAppliedStereotype("SimpleJSR220::JPA_DiscriminatorColumnJPA"), e.name) == ""
					||  getValue(getAppliedStereotype("SimpleJSR220::JPA_DiscriminatorColumnJPA"), e.name) == null) AS taggedValue ITERATOR iter SEPARATOR ","»«IF taggedValue.name == "discriminatorType"»«taggedValue.name» = DiscriminatorType.«getEnumValue(getValue(getAppliedStereotype("SimpleJSR220::JPA_DiscriminatorColumnJPA"), taggedValue.name).toString())»«ELSEIF taggedValue.name == "length"»«taggedValue.name» = «getValue(getAppliedStereotype("SimpleJSR220::JPA_DiscriminatorColumnJPA"), taggedValue.name)»«ELSE»«taggedValue.name» = "«getValue(getAppliedStereotype("SimpleJSR220::JPA_DiscriminatorColumnJPA"), taggedValue.name)»"«ENDIF»«ENDFOREACH»)
	«ENDIF»	
	«IF getAppliedStereotype("SimpleJSR220::JPA_InheritanceJPA") != null»
		@Inheritance
		(«FOREACH getAppliedStereotype("SimpleJSR220::JPA_InheritanceJPA").getAllAttributes().reject(
						e|e.name.contains("base_")
					||  e.name.contains("packageName")
					||	getValue(getAppliedStereotype("SimpleJSR220::JPA_InheritanceJPA"), e.name) == ""
					||  getValue(getAppliedStereotype("SimpleJSR220::JPA_InheritanceJPA"), e.name) == null) AS taggedValue ITERATOR iter SEPARATOR ","»«IF taggedValue.name == "strategy"»«taggedValue.name» = InheritanceType.«getEnumValue(getValue(getAppliedStereotype("SimpleJSR220::JPA_InheritanceJPA"), taggedValue.name).toString())»«ELSE»«taggedValue.name» = "«getValue(getAppliedStereotype("SimpleJSR220::JPA_InheritanceJPA"), taggedValue.name)»"«ENDIF»«ENDFOREACH»)
	«ENDIF»	
	«FOREACH getAppliedStereotypes() AS stereotype»
		«IF stereotype.name.contains("JPA")»
			«IF stereotype.name == "JPA_IdClassJPA"»
				@IdClass
				(«FOREACH stereotype.getAllAttributes().reject(
						e|e.name.contains("base_")
					||  e.name.contains("packageName")
					||	getValue(stereotype, e.name) == ""
					||  getValue(stereotype, e.name) == null) AS taggedValue ITERATOR iter SEPARATOR ","»«IF taggedValue.name == "value"»«taggedValue.name» = «getValue(stereotype, taggedValue.name)»«ELSE»«taggedValue.name» = "«getValue(stereotype, taggedValue.name)»"«ENDIF»«ENDFOREACH»)
			«ELSEIF stereotype.name == "JPA_DiscriminatorValueJPA"»
				@DiscriminatorValue
				(«FOREACH stereotype.getAllAttributes().reject(
						e|e.name.contains("base_")
					||  e.name.contains("packageName")
					||	getValue(stereotype, e.name) == ""
					||  getValue(stereotype, e.name) == null) AS taggedValue ITERATOR iter SEPARATOR ","»«taggedValue.name» = "«getValue(stereotype, taggedValue.name)»"«ENDFOREACH»)
			«ELSEIF stereotype.name == "JPA_PrimaryKeyJoinColumnJPA"»
				@PrimaryKeyJoinColumn
				(«FOREACH stereotype.getAllAttributes().reject(
						e|e.name.contains("base_")
					||  e.name.contains("packageName")
					||	getValue(stereotype, e.name) == ""
					||  getValue(stereotype, e.name) == null) AS taggedValue ITERATOR iter SEPARATOR ","»«taggedValue.name» = "«getValue(stereotype, taggedValue.name)»"«ENDFOREACH»)
			«ELSEIF stereotype.name == "JPA_PrimaryKeyJoinColumnsJPA"»
				@PrimaryKeyJoinColumns
				(«FOREACH stereotype.getAllAttributes().reject(
						e|e.name.contains("base_")
					||  e.name.contains("packageName")
					||	getValue(stereotype, e.name) == ""
					||  getValue(stereotype, e.name) == null) AS taggedValue ITERATOR iter SEPARATOR ","»«taggedValue.name» = {«getValue(stereotype, taggedValue.name)»}«ENDFOREACH»)
			«ELSEIF stereotype.name == "JPA_SequenceGeneratorJPA"»
				@SequenceGenerator
				(«FOREACH stereotype.getAllAttributes().reject(
						e|e.name.contains("base_")
					||  e.name.contains("packageName")
					||	getValue(stereotype, e.name) == ""
					||  getValue(stereotype, e.name) == null) AS taggedValue ITERATOR iter SEPARATOR ","»«IF taggedValue.name == "allocationSize"»«taggedValue.name» = «getValue(stereotype, taggedValue.name)»«ELSE»«taggedValue.name» = "«getValue(stereotype, taggedValue.name)»"«ENDIF»«ENDFOREACH»)
			«ELSEIF stereotype.name == "JPA_UniqueConstraintJPA"»
				@UniqueConstraint
				(«FOREACH stereotype.getAllAttributes().reject(
						e|e.name.contains("base_")
					||  e.name.contains("packageName")
					||	getValue(stereotype, e.name) == ""
					||  getValue(stereotype, e.name) == null) AS taggedValue ITERATOR iter SEPARATOR ","»«taggedValue.name» = {«getValue(stereotype, taggedValue.name)»}«ENDFOREACH»)
			«ELSEIF stereotype.name == "JPA_TableJPA"»
				@Table
				(«FOREACH stereotype.getAllAttributes().reject(
						e|e.name.contains("base_")
					||  e.name.contains("packageName")
					||	getValue(stereotype, e.name) == ""
					||  getValue(stereotype, e.name) == null) AS taggedValue ITERATOR iter SEPARATOR ","»«IF taggedValue.name == "uniqueConstraints"»«taggedValue.name» = {«getValue(stereotype, taggedValue.name)»}«ELSE»«taggedValue.name» = "«getValue(stereotype, taggedValue.name)»"«ENDIF»«ENDFOREACH»)
			«ELSEIF stereotype.name == "JPA_NamendQueryJPA"»
				@NamedQuery
				(«FOREACH stereotype.getAllAttributes().reject(
						e|e.name.contains("base_")
					||  e.name.contains("packageName")
					||	getValue(stereotype, e.name) == ""
					||  getValue(stereotype, e.name) == null) AS taggedValue ITERATOR iter SEPARATOR ","»«IF taggedValue.name == "hints"»«taggedValue.name» = {«getValue(stereotype, taggedValue.name)»}«ELSE»«taggedValue.name» = "«getValue(stereotype, taggedValue.name)»"«ENDIF»«ENDFOREACH»)
			«ELSEIF stereotype.name == "JPA_NamendQueriesJPA"»
				@NamedQueries
				(«FOREACH stereotype.getAllAttributes().reject(
						e|e.name.contains("base_")
					||  e.name.contains("packageName")
					||	getValue(stereotype, e.name) == ""
					||  getValue(stereotype, e.name) == null) AS taggedValue ITERATOR iter SEPARATOR ","»«taggedValue.name» = {«getValue(stereotype, taggedValue.name)»}«ENDFOREACH»)
			«ELSEIF stereotype.name == "JPA_QueryHintJPA"»
				@QueryHint
				(«FOREACH stereotype.getAllAttributes().reject(
						e|e.name.contains("base_")
					||  e.name.contains("packageName")
					||	getValue(stereotype, e.name) == ""
					||  getValue(stereotype, e.name) == null) AS taggedValue ITERATOR iter SEPARATOR ","»«taggedValue.name» = "«getValue(stereotype, taggedValue.name)»"«ENDFOREACH»)
			«REM»Generate other applied JPA stereotypes«ENDREM»
			«ELSEIF stereotype.name != "JPA_Entity" && stereotype.name != "JPA_RootJPA"»
				@«formatJpaStereotypeName(stereotype.name)»
			«ENDIF»
		
		«REM»Generate other applied stereotypes (no JPA or BVA stereotypes)«ENDREM»
		«ELSE»
			«IF !stereotype.namespace.name.contains("SimpleJSR303")»
				@«stereotype.name»
				(«FOREACH stereotype.getAllAttributes().reject(
						e|e.name.contains("base_")
					||  e.name.contains("packageName")
					||	getValue(stereotype, e.name) == ""
					||  getValue(stereotype, e.name) == null) AS taggedValue ITERATOR iter SEPARATOR ","»«taggedValue.name» = "«getValue(stereotype, taggedValue.name)»"«ENDFOREACH»
			«ENDIF»	
		«ENDIF»
	«ENDFOREACH»
«ENDDEFINE»

«DEFINE attributeAnnotations FOR uml::Property»
	«IF name == "id" && !this.isId()»
		@Id
	«ENDIF»	
	
	«FOREACH getAppliedStereotypes() AS stereotype»
		«IF stereotype.name.contains("JPA")»
			«IF stereotype.name == "JPA_OrderByJPA"»
				@OrderBy
				«FOREACH stereotype.getAllAttributes().reject(
						e|e.name.contains("base_")
					||  e.name.contains("packageName")
					||	getValue(stereotype, e.name) == ""
					||  getValue(stereotype, e.name) == null) AS taggedValue ITERATOR iter SEPARATOR ","»("«getValue(stereotype, taggedValue.name)»")«ENDFOREACH»
			«ELSEIF stereotype.name == "JPA_PrimaryKeyJoinColumnJPA"»
				@PrimaryKeyJoinColumn
				(«FOREACH stereotype.getAllAttributes().reject(
						e|e.name.contains("base_")
					||  e.name.contains("packageName")
					||	getValue(stereotype, e.name) == ""
					||  getValue(stereotype, e.name) == null) AS taggedValue ITERATOR iter SEPARATOR ","»«taggedValue.name» = "«getValue(stereotype, taggedValue.name)»"«ENDFOREACH»)	
			«ELSEIF stereotype.name == "JPA_PrimaryKeyJoinColumnsJPA"»
				@PrimaryKeyJoinColumns
				(«FOREACH stereotype.getAllAttributes().reject(
						e|e.name.contains("base_")
					||  e.name.contains("packageName")
					||	getValue(stereotype, e.name) == ""
					||  getValue(stereotype, e.name) == null) AS taggedValue ITERATOR iter SEPARATOR ","»«taggedValue.name» = {«getValue(stereotype, taggedValue.name)»}«ENDFOREACH»)
			«ELSEIF stereotype.name == "JPA_UniqueConstraintJPA"»
				@UniqueConstraint
				(«FOREACH stereotype.getAllAttributes().reject(
						e|e.name.contains("base_")
					||  e.name.contains("packageName")
					||	getValue(stereotype, e.name) == ""
					||  getValue(stereotype, e.name) == null) AS taggedValue ITERATOR iter SEPARATOR ","»«taggedValue.name» = {«getValue(stereotype, taggedValue.name)»}«ENDFOREACH»)
			«ELSEIF stereotype.name == "JPA_SequenceGeneratorJPA"»
				@SequenceGenerator
				(«FOREACH stereotype.getAllAttributes().reject(
						e|e.name.contains("base_")
					||  e.name.contains("packageName")
					||	getValue(stereotype, e.name) == ""
					||  getValue(stereotype, e.name) == null) AS taggedValue ITERATOR iter SEPARATOR ","»«IF taggedValue.name == "allocationSize" || taggedValue.name == "initialValue"»«taggedValue.name» = «getValue(stereotype, taggedValue.name)»«ELSE»«taggedValue.name» = "«getValue(stereotype, taggedValue.name)»"«ENDIF»«ENDFOREACH»)
			«ELSEIF stereotype.name == "JPA_JoinColumnJPA"»
				@JoinColumn
				(«FOREACH stereotype.getAllAttributes().reject(
						e|e.name.contains("base_")
					||  e.name.contains("packageName")
					||	getValue(stereotype, e.name) == ""
					||  getValue(stereotype, e.name) == null) AS taggedValue ITERATOR iter SEPARATOR ","»«IF taggedValue.name == "insertable" || taggedValue.name == "nullable" || taggedValue.name == "unique" || taggedValue.name == "updatable"»«taggedValue.name» = «getValue(stereotype, taggedValue.name)»«ELSE»«taggedValue.name» = "«getValue(stereotype, taggedValue.name)»"«ENDIF»«ENDFOREACH»)
			«ELSEIF stereotype.name == "JPA_JoinColumnsJPA"»
				@JoinColumns
				(«FOREACH stereotype.getAllAttributes().reject(
						e|e.name.contains("base_")
					||  e.name.contains("packageName")
					||	getValue(stereotype, e.name) == ""
					||  getValue(stereotype, e.name) == null) AS taggedValue ITERATOR iter SEPARATOR "," »{«getValue(stereotype, taggedValue.name)»}«ENDFOREACH»)
			«ELSEIF stereotype.name == "JPA_OneToOneJPA"»
				@OneToOne
				(«FOREACH stereotype.getAllAttributes().reject(
						e|e.name.contains("base_")
					||  e.name.contains("packageName")
					||	getValue(stereotype, e.name) == ""
					||  getValue(stereotype, e.name) == null) AS taggedValue ITERATOR iter SEPARATOR ","»«IF taggedValue.name == "cascade"»«taggedValue.name» = CascadeType.«getEnumValue(getValue(stereotype, taggedValue.name).toString())»«ELSEIF taggedValue.name == "fetch"»«taggedValue.name» = FetchType.«getEnumValue(getValue(stereotype, taggedValue.name).toString())»«ELSEIF taggedValue.name == "targetEntity"»«taggedValue.name» = «getValue(stereotype, taggedValue.name)»«ELSE»«taggedValue.name» = "«getValue(stereotype, taggedValue.name)»"«ENDIF»«ENDFOREACH»)
			«ELSEIF stereotype.name == "JPA_OneToManyJPA"»
				@OneToMany
				(«FOREACH stereotype.getAllAttributes().reject(
						e|e.name.contains("base_")
					||  e.name.contains("packageName")
					||	getValue(stereotype, e.name) == ""
					||  getValue(stereotype, e.name) == null) AS taggedValue ITERATOR iter SEPARATOR ","»«IF taggedValue.name == "cascade"»«taggedValue.name» = CascadeType.«getEnumValue(getValue(stereotype, taggedValue.name).toString())»«ELSEIF taggedValue.name == "fetch"»«taggedValue.name» = FetchType.«getEnumValue(getValue(stereotype, taggedValue.name).toString())»«ELSEIF taggedValue.name == "targetEntity"»«taggedValue.name» = «getValue(stereotype, taggedValue.name)»«ELSE»«taggedValue.name» = "«getValue(stereotype, taggedValue.name)»"«ENDIF»«ENDFOREACH»)
			«ELSEIF stereotype.name == "JPA_ManyToOneJPA"»
				@ManyToOne
				(«FOREACH stereotype.getAllAttributes().reject(
						e|e.name.contains("base_")
					||  e.name.contains("packageName")
					||	getValue(stereotype, e.name) == ""
					||  getValue(stereotype, e.name) == null) AS taggedValue ITERATOR iter SEPARATOR ","»«IF taggedValue.name == "cascade"»«taggedValue.name» = CascadeType.«getEnumValue(getValue(stereotype, taggedValue.name).toString())»«ELSEIF taggedValue.name == "fetch"»«taggedValue.name» = FetchType.«getEnumValue(getValue(stereotype, taggedValue.name).toString())»«ELSEIF taggedValue.name == "targetEntity"»«taggedValue.name» = «getValue(stereotype, taggedValue.name)»«ELSE»«taggedValue.name» = "«getValue(stereotype, taggedValue.name)»"«ENDIF»«ENDFOREACH»)
			«ELSEIF stereotype.name == "JPA_ManyToManyJPA"»
				@ManyToMany
				(«FOREACH stereotype.getAllAttributes().reject(
						e|e.name.contains("base_")
					||  e.name.contains("packageName")
					||	getValue(stereotype, e.name) == ""
					||  getValue(stereotype, e.name) == null) AS taggedValue ITERATOR iter SEPARATOR ","»«IF taggedValue.name == "cascade"»«taggedValue.name» = CascadeType.«getEnumValue(getValue(stereotype, taggedValue.name).toString())»«ELSEIF taggedValue.name == "fetch"»«taggedValue.name» = FetchType.«getEnumValue(getValue(stereotype, taggedValue.name).toString())»«ELSEIF taggedValue.name == "targetEntity"»«taggedValue.name» = «getValue(stereotype, taggedValue.name)»«ELSE»«taggedValue.name» = "«getValue(stereotype, taggedValue.name)»"«ENDIF»«ENDFOREACH»)
			«ELSEIF stereotype.name == "JPA_IdJPA"»
				@Id
				«IF isPrimaryKeyClassReq()»
					«EXPAND PkClass::pkClass FOR class»
				«ENDIF»
			«ELSEIF stereotype.name == "JPA_GeneratedValueJPA"»
				@GeneratedValue
				(«FOREACH stereotype.getAllAttributes().reject(
						e|e.name.contains("base_")
					||  e.name.contains("packageName")
					||	getValue(stereotype, e.name) == ""
					||  getValue(stereotype, e.name) == null) AS taggedValue ITERATOR iter SEPARATOR ","»«IF taggedValue.name == "generator"»«taggedValue.name» = GenerationType.«getEnumValue(getValue(stereotype, taggedValue.name).toString())»«ELSEIF taggedValue.name == "strategy"»«taggedValue.name» = «getValue(stereotype, taggedValue.name)»«ELSE»«taggedValue.name» = "«getValue(stereotype, taggedValue.name)»"«ENDIF»«ENDFOREACH»)
			«ELSEIF stereotype.name == "JPA_TransientJPA"»
				@Transient
			«ELSEIF stereotype.name == "JPA_JoinTableJPA"»
				@JoinTable
				(«FOREACH stereotype.getAllAttributes().reject(
						e|e.name.contains("base_")
					||  e.name.contains("packageName")
					||	getValue(stereotype, e.name) == ""
					||  getValue(stereotype, e.name) == null) AS taggedValue ITERATOR iter SEPARATOR ","»«IF taggedValue.name == "inverseJoinColumns" || taggedValue.name == "joinColumns" || taggedValue.name == "uniqueConstraints"»«taggedValue.name» = {«getValue(stereotype, taggedValue.name)»}«ELSE»«taggedValue.name» = "«getValue(stereotype, taggedValue.name)»"«ENDIF»«ENDFOREACH»)
			«ELSEIF stereotype.name == "JPA_QueryHintJPA"»
				@QueryHint
				(«FOREACH stereotype.getAllAttributes().reject(
						e|e.name.contains("base_")
					||  e.name.contains("packageName")
					||	getValue(stereotype, e.name) == ""
					||  getValue(stereotype, e.name) == null) AS taggedValue ITERATOR iter SEPARATOR ","»«taggedValue.name» = "«getValue(stereotype, taggedValue.name)»"«ENDFOREACH»)
			«ELSE»	
			«ENDIF»	
		
		«REM»Generate other applied stereotypes (no JPA or BVA stereotypes)«ENDREM»
		«ELSE»
			«IF !stereotype.namespace.name.contains("SimpleJSR303")»
				@«stereotype.name»
				(«FOREACH stereotype.getAllAttributes().reject(
						e|e.name.contains("base_")
					||  e.name.contains("packageName")
					||	getValue(stereotype, e.name) == ""
					||  getValue(stereotype, e.name) == null) AS taggedValue ITERATOR iter SEPARATOR ","»«taggedValue.name» = "«getValue(stereotype, taggedValue.name)»"«ENDFOREACH»
			«ENDIF»	
		«ENDIF»
	«ENDFOREACH»

	«IF getPropertyMultiplicity() == "OneToMany" &&
		getAppliedStereotype("SimpleJSR220::JPA_OneToManyJPA") == null»
			«IF isEntity()»
				@OneToMany(targetEntity=«abstractClassName(this.type.name)».class, cascade = ALL, fetch = FetchType.LAZY«IF genDefOrphanRemovalTaggedValueForRelations() == "true"», orphanRemoval = true«ENDIF»)
				«EXPAND propertyJoinColumn»
			«ELSEIF isEnum()»
				@Column(name = "«generateColumnName(this)»"«getCustomColumnDefinitionString(this)»)
				@Enumerated(EnumType.STRING)
			«ENDIF»
	«ENDIF»
	«IF getPropertyMultiplicity() == "OneToOne" &&
		getAppliedStereotype("SimpleJSR220::JPA_OneToOneJPA") == null»
		«IF isEntity()»
			@OneToOne(targetEntity=«abstractClassName(this.type.name)».class, cascade = ALL, fetch = FetchType.LAZY«IF genDefOrphanRemovalTaggedValueForRelations() == "true"», orphanRemoval = true«ENDIF»)
			«EXPAND propertyJoinColumn»
		«ELSEIF isEnum()»
			@Column(name = "«generateColumnName(this)»"«getCustomColumnDefinitionString(this)»)
			@Enumerated(EnumType.STRING)
		«ENDIF»
	«ENDIF»
	«IF getPropertyMultiplicity() == "ManyToOne" &&
		getAppliedStereotype("SimpleJSR220::JPA_ManyToOneJPA") == null»
			«IF isEntity()»
				@ManyToOne(targetEntity=«abstractClassName(this.type.name)».class, cascade = ALL, fetch = FetchType.LAZY«IF genDefOrphanRemovalTaggedValueForRelations() == "true"», orphanRemoval = true«ENDIF»)
				«EXPAND propertyJoinColumn»
			«ELSEIF isEnum()»
			 	@Column(name = "«generateColumnName(this)»"«getCustomColumnDefinitionString(this)»)
				@Enumerated(EnumType.STRING)
			«ENDIF»
	«ENDIF»
	«IF getPropertyMultiplicity() == "ManyToMany" &&
		getAppliedStereotype("SimpleJSR220::JPA_ManyToManyJPA") == null»
			«IF isEntity()»
				@ManyToMany(targetEntity=«abstractClassName(this.type.name)».class, cascade = ALL, fetch = FetchType.LAZY«IF genDefOrphanRemovalTaggedValueForRelations() == "true"», orphanRemoval = true«ENDIF»)
				«EXPAND propertyJoinColumn»
			«ELSEIF isEnum()»
			 	@Column(name = "«generateColumnName(this)»"«getCustomColumnDefinitionString(this)»)
				@Enumerated(EnumType.STRING)
			«ENDIF»
	«ENDIF»
	
	«IF checkClassForColumnAnnotation()»
		«IF getAppliedStereotype("SimpleJSR220::JPA_ColumnJPA") != null»
			@Column
			(«FOREACH getAppliedStereotype("SimpleJSR220::JPA_ColumnJPA").getAllAttributes().reject(
						e|e.name.contains("base_")
					||  e.name.contains("packageName")
					||	getValue(getAppliedStereotype("SimpleJSR220::JPA_ColumnJPA"), e.name) == ""
					||  getValue(getAppliedStereotype("SimpleJSR220::JPA_ColumnJPA"), e.name) == null) AS taggedValue ITERATOR iter SEPARATOR ","»«IF taggedValue.name == "insertable" || taggedValue.name == "length" || taggedValue.name == "nullable" || taggedValue.name == "precision" || taggedValue.name == "scale" || taggedValue.name == "unique" || taggedValue.name == "updateable"»«taggedValue.name» = «getValue(getAppliedStereotype("SimpleJSR220::JPA_ColumnJPA"), taggedValue.name)»«ELSE»«taggedValue.name» = "«getValue(getAppliedStereotype("SimpleJSR220::JPA_ColumnJPA"), taggedValue.name)»"«ENDIF»«ENDFOREACH»«getCustomColumnDefinitionString(this)»)
		«ELSE»

		«ENDIF»
	«ELSE»
		«IF getPropertyMultiplicity() == null»
			«IF getAppliedStereotype("SimpleJSR220::JPA_ColumnJPA") == null && getAppliedStereotype("SimpleJSR220::JPA_JoinColumnJPA") == null && getAppliedStereotype("SimpleJSR220::JPA_JoinColumnsJPA") == null»
				@Column(name = "«generateColumnName(this)»"«getCustomColumnDefinitionString(this)»)
			«ENDIF»
		«ENDIF»	
	«ENDIF»
	
	«EXPAND Attribute::attribute»
«ENDDEFINE»

«DEFINE propertyJoinColumn FOR uml::Property»
	«IF !isId()»
		@JoinColumn(name = "«generateColumnName(this)»", referencedColumnName = "«generateColumnName(getIdAttributeName(), generateTableName(this.type.name))»", nullable = false«getCustomColumnDefinitionString(this)»)
	«ELSEIF isPrimaryKeyClassReq()»
	    	@JoinColumns({
				«FOREACH getIdAttributes() AS e ITERATOR iter»									
					@JoinColumn(name = "«this.name»_«e.name»", nullable = false  «getCustomColumnDefinitionString(this)»),
				«ENDFOREACH»
					@JoinColumn(name = "«this.name»_«name.toFirstLower()»Pk", nullable = false «getCustomColumnDefinitionString(this)»),
			})
	«ELSEIF !isEnum()»
		@JoinColumn(name = "«this.class.name»_«getIdAttributeName()»", nullable = false «getCustomColumnDefinitionString(this)»)
	«ENDIF»
«ENDDEFINE»

«DEFINE operationAnnotations FOR uml::Operation»
	«FOREACH getAppliedStereotypes() AS stereotype»
		«IF stereotype.name.contains("JPA")»
			«IF stereotype.name == "OneToManyJPA"»
			«ELSEIF stereotype.name == "JPA_OrderByJPA"»
				@OrderBy
				«FOREACH stereotype.getAllAttributes().reject(
						e|e.name.contains("base_")
					||  e.name.contains("packageName")
					||	getValue(stereotype, e.name) == ""
					||  getValue(stereotype, e.name) == null) AS taggedValue ITERATOR iter SEPARATOR ","»("«getValue(stereotype, taggedValue.name)»")«ENDFOREACH»
			«ELSEIF stereotype.name == "JPA_PrimaryKeyJoinColumnJPA"»
				@PrimaryKeyJoinColumn
				(«FOREACH stereotype.getAllAttributes().reject(
						e|e.name.contains("base_")
					||  e.name.contains("packageName")
					||	getValue(stereotype, e.name) == ""
					||  getValue(stereotype, e.name) == null) AS taggedValue ITERATOR iter SEPARATOR ","»«taggedValue.name» = "«getValue(stereotype, taggedValue.name)»"«ENDFOREACH»)
			«ELSEIF stereotype.name == "JPA_PrimaryKeyJoinColumnsJPA"»
				@PrimaryKeyJoinColumns
				(«FOREACH stereotype.getAllAttributes().reject(
						e|e.name.contains("base_")
					||  e.name.contains("packageName")
					||	getValue(stereotype, e.name) == ""
					||  getValue(stereotype, e.name) == null) AS taggedValue ITERATOR iter SEPARATOR ","»«taggedValue.name» = {«getValue(stereotype, taggedValue.name)»}«ENDFOREACH»)
			«ELSEIF stereotype.name == "JPA_SequenceGeneratorJPA"»
				@SequenceGenerator
				(«FOREACH stereotype.getAllAttributes().reject(
						e|e.name.contains("base_")
					||  e.name.contains("packageName")
					||	getValue(stereotype, e.name) == ""
					||  getValue(stereotype, e.name) == null) AS taggedValue ITERATOR iter SEPARATOR ","»«IF taggedValue.name == "allocationSize"»«taggedValue.name» = «getValue(stereotype, taggedValue.name)»«ELSE»«taggedValue.name» = "«getValue(stereotype, taggedValue.name)»"«ENDIF»«ENDFOREACH»)
			«ELSEIF stereotype.name == "JPA_UniqueConstraintJPA"»
				@UniqueConstraint
				(«FOREACH stereotype.getAllAttributes().reject(
						e|e.name.contains("base_")
					||  e.name.contains("packageName")
					||	getValue(stereotype, e.name) == ""
					||  getValue(stereotype, e.name) == null) AS taggedValue ITERATOR iter SEPARATOR ","»«taggedValue.name» = {«getValue(stereotype, taggedValue.name)»}«ENDFOREACH»)
			«ELSEIF stereotype.name == "JPA_JoinColumnJPA"»
				@JoinColumn
				(«FOREACH stereotype.getAllAttributes().reject(
						e|e.name.contains("base_")
					||  e.name.contains("packageName")
					||	getValue(stereotype, e.name) == ""
					||  getValue(stereotype, e.name) == null) AS taggedValue ITERATOR iter SEPARATOR ","»«IF taggedValue.name == "insertable" || taggedValue.name == "nullable" || taggedValue.name == "unique" || taggedValue.name == "updatable"»«taggedValue.name» = «getValue(stereotype, taggedValue.name)»«ELSE»«taggedValue.name» = "«getValue(stereotype, taggedValue.name)»"«ENDIF»«ENDFOREACH»)
			«ELSEIF stereotype.name == "JPA_JoinColumnsJPA"»
				@JoinColumns
				(«FOREACH stereotype.getAllAttributes().reject(
						e|e.name.contains("base_")
					||  e.name.contains("packageName")
					||	getValue(stereotype, e.name) == ""
					||  getValue(stereotype, e.name) == null) AS taggedValue ITERATOR iter SEPARATOR ","»«taggedValue.name» = {«getValue(stereotype, taggedValue.name)»}«ENDFOREACH»)
			«ELSEIF stereotype.name == "JPA_OneToOneJPA"»
				@OneToOne
				(«FOREACH stereotype.getAllAttributes().reject(
						e|e.name.contains("base_")
					||  e.name.contains("packageName")
					||	getValue(stereotype, e.name) == ""
					||  getValue(stereotype, e.name) == null) AS taggedValue ITERATOR iter SEPARATOR ","»«IF taggedValue.name == "cascade"»«taggedValue.name» = CascadeType.«getEnumValue(getValue(stereotype, taggedValue.name).toString())»«ELSEIF taggedValue.name == "fetch"»«taggedValue.name» = FetchType.«getEnumValue(getValue(stereotype, taggedValue.name).toString())»«ELSEIF taggedValue.name == "targetEntity"»«taggedValue.name» = «getValue(stereotype, taggedValue.name)»«ELSE»«taggedValue.name» = "«getValue(stereotype, taggedValue.name)»"«ENDIF»«ENDFOREACH»)
			«ELSEIF stereotype.name == "JPA_OneToManyJPA"»
				@OneToMany
				(«FOREACH stereotype.getAllAttributes().reject(
						e|e.name.contains("base_")
					||  e.name.contains("packageName")
					||	getValue(stereotype, e.name) == ""
					||  getValue(stereotype, e.name) == null) AS taggedValue ITERATOR iter SEPARATOR ","»«IF taggedValue.name == "cascade"»«taggedValue.name» = CascadeType.«getEnumValue(getValue(stereotype, taggedValue.name).toString())»«ELSEIF taggedValue.name == "fetch"»«taggedValue.name» = FetchType.«getEnumValue(getValue(stereotype, taggedValue.name).toString())»«ELSEIF taggedValue.name == "targetEntity"»«taggedValue.name» = «getValue(stereotype, taggedValue.name)»«ELSE»«taggedValue.name» = "«getValue(stereotype, taggedValue.name)»"«ENDIF»«ENDFOREACH»)
			«ELSEIF stereotype.name == "JPA_ManyToOneJPA"»
				@ManyToOne
				(«FOREACH stereotype.getAllAttributes().reject(
						e|e.name.contains("base_")
					||  e.name.contains("packageName")
					||	getValue(stereotype, e.name) == ""
					||  getValue(stereotype, e.name) == null) AS taggedValue ITERATOR iter SEPARATOR ","»«IF taggedValue.name == "cascade"»«taggedValue.name» = CascadeType.«getEnumValue(getValue(stereotype, taggedValue.name).toString())»«ELSEIF taggedValue.name == "fetch"»«taggedValue.name» = FetchType.«getEnumValue(getValue(stereotype, taggedValue.name).toString())»«ELSEIF taggedValue.name == "targetEntity"»«taggedValue.name» = «getValue(stereotype, taggedValue.name)»«ELSE»«taggedValue.name» = "«getValue(stereotype, taggedValue.name)»"«ENDIF»«ENDFOREACH»)
			«ELSEIF stereotype.name == "JPA_ManyToManyJPA"»
				@ManyToMany
				(«FOREACH stereotype.getAllAttributes() AS taggedValue ITERATOR iter»«IF !taggedValue.name.contains("base")»«IF getValue(stereotype, taggedValue.name) != ""»«IF taggedValue.name == "cascade"»«taggedValue.name» = CascadeType.«getEnumValue(getValue(stereotype, taggedValue.name).toString())»«ELSEIF taggedValue.name == "fetch"»«taggedValue.name» = FetchType.«getEnumValue(getValue(stereotype, taggedValue.name).toString())»«ELSEIF taggedValue.name == "targetEntity"»«taggedValue.name» = «getValue(stereotype, taggedValue.name)»«ELSE»«taggedValue.name» = "«getValue(stereotype, taggedValue.name)»"«ENDIF»«IF iter.counter1 < stereotype.getAllAttributes().size - 4»,«ENDIF»«ENDIF»«ENDIF»«ENDFOREACH»)
			«ELSEIF stereotype.name == "JPA_IdJPA"»
				@Id
			«ELSEIF stereotype.name == "JPA_GeneratedValueJPA"»
				@GeneratedValue
				(«FOREACH stereotype.getAllAttributes().reject(
						e|e.name.contains("base_")
					||  e.name.contains("packageName")
					||	getValue(stereotype, e.name) == ""
					||  getValue(stereotype, e.name) == null) AS taggedValue ITERATOR iter SEPARATOR ","»«IF taggedValue.name == "strategy"»«taggedValue.name» = «getValue(stereotype, taggedValue.name)»«ELSE»«taggedValue.name» = "«getValue(stereotype, taggedValue.name)»"«ENDIF»«ENDFOREACH»)
			«ELSEIF stereotype.name == "JPA_ColumnJPA"»
				@Column
				(«FOREACH stereotype.getAllAttributes().reject(
						e|e.name.contains("base_")
					||  e.name.contains("packageName")
					||	getValue(stereotype, e.name) == ""
					||  getValue(stereotype, e.name) == null) AS taggedValue ITERATOR iter SEPARATOR ","»«IF taggedValue.name == "insertable" || taggedValue.name == "length" || taggedValue.name == "nullable" || taggedValue.name == "precision" || taggedValue.name == "scale" || taggedValue.name == "unique" || taggedValue.name == "updateable"»«taggedValue.name» = «getValue(stereotype, taggedValue.name)»«ELSE»«taggedValue.name» = "«getValue(stereotype, taggedValue.name)»"«ENDIF»«ENDFOREACH»)
			«ELSEIF stereotype.name == "JPA_TransientJPA"»
				@Transient
			«ELSEIF stereotype.name == "JPA_JoinTableJPA"»
				@JoinTable
				(«FOREACH stereotype.getAllAttributes().reject(
						e|e.name.contains("base_")
					||  e.name.contains("packageName")
					||	getValue(stereotype, e.name) == ""
					||  getValue(stereotype, e.name) == null) AS taggedValue ITERATOR iter SEPARATOR ","»«IF taggedValue.name == "inverseJoinColumns" || taggedValue.name == "joinColumns" || taggedValue.name == "uniqueConstraints"»«taggedValue.name» = {«getValue(stereotype, taggedValue.name)»}«ELSE»«taggedValue.name» = "«getValue(stereotype, taggedValue.name)»"«ENDIF»«ENDFOREACH»)
			«ELSEIF stereotype.name == "JPA_QueryHintJPA"»
				@QueryHint
				(«FOREACH stereotype.getAllAttributes().reject(
						e|e.name.contains("base_")
					||  e.name.contains("packageName")
					||	getValue(stereotype, e.name) == ""
					||  getValue(stereotype, e.name) == null) AS taggedValue ITERATOR iter SEPARATOR ","»«taggedValue.name» = "«getValue(stereotype, taggedValue.name)»"«ENDFOREACH»)
			«ELSE»		
			«ENDIF»	
		
		«REM»Generate other applied stereotypes (no JPA or BVA stereotypes)«ENDREM»
		«ELSE»
			«IF !stereotype.namespace.name.contains("SimpleJSR303")»
				@«stereotype.name»
				(«FOREACH stereotype.getAllAttributes().reject(
						e|e.name.contains("base_")
					||  e.name.contains("packageName")
					||	getValue(stereotype, e.name) == ""
					||  getValue(stereotype, e.name) == null) AS taggedValue ITERATOR iter SEPARATOR ","»«taggedValue.name» = "«getValue(stereotype, taggedValue.name)»"«ENDFOREACH»
			«ENDIF»	
		«ENDIF»
	«ENDFOREACH»
«ENDDEFINE»